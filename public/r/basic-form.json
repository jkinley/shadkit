{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "basic-form",
  "type": "registry:block",
  "title": "BasicForm",
  "description": "A basic tanstack form with zod validations using react query.",
  "registryDependencies": [
    "https://shadkit.vercel.app/r/input.json",
    "https://shadkit.vercel.app/r/label.json",
    "https://shadkit.vercel.app/r/textarea.json",
    "zod",
    "@tanstack/react-form",
    "@radix-ui/react-label",
    "@radix-ui/react-select"
  ],
  "files": [
    {
      "path": "registry/blocks/basic-form/index.tsx",
      "content": "import { createFileRoute } from '@tanstack/react-router';\nimport React, { useState } from 'react';\nimport { useForm } from '@tanstack/react-form';\nimport { z } from 'zod';\nimport { Label } from '@/registry/ui/label';\nimport { Textarea } from '@/registry/ui/textarea';\nimport { Input } from '@/registry/ui/input';\nimport { useSaveUser } from './-hooks/use-save-user';\n\nconst userSchema = z.object({\n  firstName: z.string().min(5, {\n    message: 'First name cannot be less than 5 letters'\n  }),\n  lastName: z.string().min(3, 'Last name must be at least 3 characters')\n});\n\ntype User = z.infer<typeof userSchema>;\n\nfunction BasicForm() {\n  const [lastSubmittedValues, setLastSubmittedValues] = useState({\n    firstName: '',\n    lastName: ''\n  });\n  const [isDirty, setIsDirty] = useState(false);\n\n  const saveUserMutation = useSaveUser();\n\n  const form = useForm({\n    defaultValues: lastSubmittedValues,\n    onSubmit: async ({ value }) => {\n      setIsDirty(false);\n      setLastSubmittedValues(value);\n      saveUserMutation.mutate(value, {\n        onSuccess: (data) => {\n          console.log('User saved with ID:', data.id);\n          alert('User created successfully!');\n        },\n        onError: (error) => {\n          console.error('Save failed:', error.message);\n          alert('Failed to create user.');\n        }\n      });\n    },\n    validators: {\n      onChange: userSchema\n    }\n  });\n\n  const checkDirtyState = (values: User) => {\n    const currentValues = JSON.stringify(values);\n    const lastSubmittedValuesStr = JSON.stringify(lastSubmittedValues);\n    setIsDirty(currentValues !== lastSubmittedValuesStr);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"max-w-md mx-auto p-6 bg-white shadow-xl rounded-2xl border border-gray-200 transition-all duration-300\">\n        <h1 className=\"text-2xl font-bold mb-6 text-gray-800 text-center\">TanStack Zod Form with Validations</h1>\n\n        <div className=\"space-y-4\">\n          {/* First Name Field */}\n          <form.Field name=\"firstName\" validators={{ onChangeAsyncDebounceMs: 500 }}>\n            {(field) => (\n              <div className=\"relative group\">\n                <FormField\n                  id=\"firstName\"\n                  label=\"First Name\"\n                  field={field}\n                  className=\"transition-all duration-300 focus:ring-2 focus:ring-blue-500\"\n                  onChange={() => checkDirtyState(form.state.values)}\n                />\n                <span className=\"absolute bottom-0 left-0 w-full h-0.5 bg-blue-500 scale-x-0 group-focus-within:scale-x-100 transition-transform duration-300\"></span>\n              </div>\n            )}\n          </form.Field>\n\n          {/* Last Name Field */}\n          <form.Field name=\"lastName\" validators={{ onChangeAsyncDebounceMs: 500 }}>\n            {(field) => (\n              <div className=\"relative group\">\n                <FormField\n                  id=\"lastName\"\n                  label=\"Last Name\"\n                  field={field}\n                  type=\"text\"\n                  className=\"transition-all duration-300 focus:ring-2 focus:ring-blue-500\"\n                  onChange={() => checkDirtyState(form.state.values)}\n                />\n                <span className=\"absolute bottom-0 left-0 w-full h-0.5 bg-blue-500 scale-x-0 group-focus-within:scale-x-100 transition-transform duration-300\"></span>\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        {/* Submit Button */}\n        <form.Subscribe selector={(state) => [state.canSubmit, state.isValidating]}>\n          {([canSubmit, isValidating]) => (\n            <button\n              type=\"submit\"\n              disabled={!canSubmit || isValidating || !isDirty || saveUserMutation.isPending}\n              onClick={form.handleSubmit}\n              className={`w-full mt-4 py-2 px-4 text-white font-semibold rounded-lg transition-all duration-300 ${\n                canSubmit && isDirty && !saveUserMutation.isPending\n                  ? 'bg-blue-600 hover:bg-blue-700 active:scale-95'\n                  : 'bg-gray-300 cursor-not-allowed'\n              }`}\n            >\n              {saveUserMutation.isPending ? 'Submitting...' : 'Submit'}\n            </button>\n          )}\n        </form.Subscribe>\n      </div>\n    </div>\n  );\n}\n\nexport const Route = createFileRoute('/basic-form/')({\n  component: BasicForm\n});\n\ninterface FormFieldProps {\n  id: string;\n  label: string;\n  field: any;\n  type?: 'text' | 'textarea';\n  placeholder?: string;\n  className: string;\n  onChange?: () => void;\n}\n\nconst FormField: React.FC<FormFieldProps> = ({\n  id,\n  label,\n  field,\n  type = 'text',\n  placeholder = '',\n  onChange,\n  className = ''\n}) => {\n  const FieldComponent = type === 'textarea' ? Textarea : Input;\n\n  const handleChange = (value: string) => {\n    field.handleChange(value);\n    onChange?.();\n  };\n\n  return (\n    <div>\n      <Label htmlFor={id} className=\"text-sm font-medium mb-2 block\">\n        {label}\n      </Label>\n      <FieldComponent\n        id={id}\n        value={field.state.value}\n        onChange={(e) => handleChange(e.target.value)}\n        placeholder={placeholder}\n        className={className}\n      />\n      {field.state.meta.errors?.length > 0 && (\n        <ul className=\"text-destructive text-sm mt-1 space-y-1\">\n          {field.state.meta.errors.map((err: any, index: number) => (\n            <li key={index}>{typeof err === 'string' ? err : err.message}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:page",
      "target": "~/src/routes/basic-form/index.tsx"
    },
    {
      "path": "registry/blocks/basic-form/-hooks/use-save-user.tsx",
      "content": "// hooks/useSaveUser.ts\n\nimport { useMutation } from \"@tanstack/react-query\";\nimport { saveUserData, type UserData } from \"../-lib/save-user\";\n\nexport const useSaveUser = () => {\n  return useMutation({\n    mutationFn: (data: UserData) => saveUserData(data),\n  });\n};\n",
      "type": "registry:hook",
      "target": "~/src/routes/basic-form/-hooks/use-save-use.tsx"
    },
    {
      "path": "registry/blocks/basic-form/-lib/save-user.tsx",
      "content": "// lib/api.ts\n\nexport type UserData = {\n  firstName: string;\n  lastName: string;\n};\n\nexport const saveUserData = async (data: UserData): Promise<{ id: number }> => {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to save user\");\n  }\n\n  return response.json();\n};\n",
      "type": "registry:lib",
      "target": "~/src/routes/basic-form/-lib/save-user.tsx"
    }
  ]
}